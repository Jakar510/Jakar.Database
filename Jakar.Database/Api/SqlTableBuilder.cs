// Jakar.Extensions :: Jakar.SqlBuilder
// 3/1/2024  23:20

namespace Jakar.Database.DbMigrations;


/*
 Numeric Types

       INTEGER: A whole number, varying in column.Size from SMALLINT to BIGINT depending on the storage column.Size and range.
       DECIMAL(Precision, Scale): A fixed-point number with a specified number of digits before and after the decimal point.
       NUMERIC(Precision, Scale): Similar to DECIMAL, often used interchangeably.
       FLOAT(Precision): A floating-point number with machine-dependent precision.
       REAL and DOUBLE PRECISION: Floating-point numbers with more precision than FLOAT.

   String Types

       CHAR(Size): A fixed-length character string, space-padded.
       VARCHAR(Size): A variable-length character string.
       TEXT: A large text data type, with column.Size limits depending on the DBMS.

   Date and Time Types

       DATE: Stores a date (year, month, day).
       TIME: Stores a time of day without a date.
       DATETIME: Stores both date and time.
       TIMESTAMP: Stores a timestamp, often used for recording when a row was last updated.

   Binary Types

       BINARY(Size): Similar to CHAR, but stores binary bytes.
       VARBINARY(Size): Similar to VARCHAR, but for binary bytes.
       BLOB: Binary Large Object, a large piece of binary data, such as images or audio.

   Boolean Type

       BOOLEAN: Stores TRUE or FALSE.

   Specialized Types

       ENUM: A string object that can have only one value chosen from a list of predefined values.
       SET: Similar to ENUM, but can store multiple values from a predefined list.
       UUID/GUID: A special type for storing Universally Unique Identifiers.
       JSON: Stores JSON data, allowing for complex data structures within a single database field.
       ARRAY: Supported by some databases like PostgreSQL, allowing storage of arrays.
       XML: For storing XML data, with some DBMS providing additional functions to manipulate XML data.

   Geography and Geometry Types (Spatial Types)

       POINT, LINESTRING, POLYGON, and more: These types are used for storing and manipulating spatial data, such as coordinates and shapes, especially in databases that support GIS (Geographic Information Systems).
 */



public readonly ref struct SqlTableBuilder<TSelf>( FrozenDictionary<string, ColumnMetaData> columns )
    where TSelf : class, ITableRecord<TSelf>
{
    private readonly FrozenDictionary<string, ColumnMetaData> __columns = columns;


    public static SqlTableBuilder<TSelf> Default => new(TSelf.PropertyMetaData);


    public string Build()
    {
        StringBuilder query     = new(10240);
        string        tableName = TSelf.TableName;

        query.Append("CREATE TABLE ");
        query.Append(tableName);
        query.Append(" (");

        foreach ( ( string columnName, ColumnMetaData column ) in __columns )
        {
            ColumnOptions options = column.Options;

            if ( options.HasFlagValue(ColumnOptions.Indexed) )
            {
                query.Append(column.IndexColumnName ?? $"{column.ColumnName}_index");
                query.Append(" ON ");
                query.Append(tableName);
                query.Append(" (");
                query.Append(columnName);
                query.Append(");");
                continue;
            }

            string dataType = column.DataType;

            query.Append(query[^1] == '('
                             ? "\n    "
                             : ",\n    ");

            query.Append(columnName);
            query.Append(' ');
            query.Append(dataType);

            if ( column.Checks is not null )
            {
                query.Append(" CHECK ( ");

                query.AppendJoin(column.Checks.And
                                     ? AND
                                     : OR,
                                 column.Checks.Checks);

                query.Append(" )");
            }

            if ( options.HasFlagValue(ColumnOptions.Unique) ) { query.Append(" UNIQUE"); }

            query.Append(column.IsNullable
                             ? " NULL"
                             : " NOT NULL");

            if ( options.HasFlagValue(ColumnOptions.AlwaysIdentity) ) { query.Append(" GENERATED ALWAYS AS IDENTITY"); }

            else if ( options.HasFlagValue(ColumnOptions.DefaultIdentity) ) { query.Append(" GENERATED BY DEFAULT AS IDENTITY"); }

            if ( options.HasFlagValue(ColumnOptions.PrimaryKey) ) { query.Append(" PRIMARY KEY"); }
        }

        return query.ToString();
    }
}
